import 'package:flutter/material.dart';
import 'package:push_app/config/services/local_notifications_service.dart';

/// Widget de demostraci√≥n para probar las notificaciones locales
///
/// Este widget proporciona botones para probar diferentes tipos de notificaciones
/// y sirve como ejemplo de c√≥mo usar el LocalNotificationsService
class LocalNotificationDemo extends StatefulWidget {
  const LocalNotificationDemo({super.key});

  @override
  State<LocalNotificationDemo> createState() => _LocalNotificationDemoState();
}

class _LocalNotificationDemoState extends State<LocalNotificationDemo> {
  int _notificationId = 1;

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.all(8),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'üîî Prueba de Notificaciones Locales',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),

            // Notificaci√≥n simple
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: _showSimpleNotification,
                icon: const Icon(Icons.notifications),
                label: const Text('Notificaci√≥n Simple'),
              ),
            ),
            const SizedBox(height: 12),

            // Notificaci√≥n expandida
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: _showExpandedNotification,
                icon: const Icon(Icons.expand_more),
                label: const Text('Notificaci√≥n Expandida'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
            const SizedBox(height: 12),

            // Notificaci√≥n con acciones
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: _showNotificationWithActions,
                icon: const Icon(Icons.touch_app),
                label: const Text('Notificaci√≥n con Acciones'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
            const SizedBox(height: 12),

            // Cancelar todas las notificaciones
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: _cancelAllNotifications,
                icon: const Icon(Icons.cancel),
                label: const Text('Cancelar Todas'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.red,
                  foregroundColor: Colors.white,
                ),
              ),
            ),
            const SizedBox(height: 20),

            // Informaci√≥n adicional
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Theme.of(context).colorScheme.surface,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(
                  color: Theme.of(context).colorScheme.outline.withOpacity(0.3),
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'üí° Informaci√≥n:',
                    style: Theme.of(context).textTheme.titleSmall?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '‚Ä¢ Las notificaciones aparecer√°n aunque la app est√© en segundo plano\n'
                    '‚Ä¢ Puedes interactuar con las notificaciones desde la bandeja\n'
                    '‚Ä¢ Los logs aparecen en la consola cuando interact√∫as con ellas',
                    style: Theme.of(context).textTheme.bodySmall,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// Muestra una notificaci√≥n simple
  void _showSimpleNotification() {
    LocalNotificationsService.showNotification(
      id: _notificationId++,
      title: '¬°Hola! üëã',
      body: 'Esta es una notificaci√≥n simple de prueba.',
      payload: 'simple_notification_${DateTime.now().millisecondsSinceEpoch}',
    );

    _showSnackBar('Notificaci√≥n simple enviada');
  }

  /// Muestra una notificaci√≥n expandida
  void _showExpandedNotification() {
    LocalNotificationsService.showExpandedNotification(
      id: _notificationId++,
      title: 'üìÑ Notificaci√≥n Expandida',
      body: 'Toca para expandir...',
      expandedBody: 'Este es el texto expandido de la notificaci√≥n. '
          'Aqu√≠ puedes ver mucho m√°s contenido cuando expandas la notificaci√≥n. '
          'Es √∫til para mostrar detalles adicionales o informaci√≥n m√°s completa '
          'que no cabe en una notificaci√≥n normal.',
      payload: 'expanded_notification_${DateTime.now().millisecondsSinceEpoch}',
    );

    _showSnackBar('Notificaci√≥n expandida enviada');
  }

  /// Muestra una notificaci√≥n con botones de acci√≥n
  void _showNotificationWithActions() {
    LocalNotificationsService.showNotificationWithActions(
      id: _notificationId++,
      title: '‚ö° Acci√≥n Requerida',
      body: '¬øDeseas continuar con esta acci√≥n?',
      payload: 'action_notification_${DateTime.now().millisecondsSinceEpoch}',
    );

    _showSnackBar('Notificaci√≥n con acciones enviada');
  }

  /// Cancela todas las notificaciones
  void _cancelAllNotifications() {
    LocalNotificationsService.cancelAllNotifications();
    _showSnackBar('Todas las notificaciones canceladas');
  }

  /// Muestra un SnackBar con un mensaje
  void _showSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        duration: const Duration(seconds: 2),
      ),
    );
  }
}
